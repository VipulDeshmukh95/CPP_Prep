// Header file

#ifndef _MYSTRING_H_   //pre processor directive used as header guards. This line checks if the macro _MYSTRING_H_ is not defined. If its not defined, 	the code between #ifndef and #endif is included in the compilation 
#define _MYSTRING_H_//This directive defines the macro _MYSTRING_H_

//Below will be the code contents (Header file contents) which will be included for the compilation if macro _MYSTRING_H_ is not defined
class Mystring
{
   friend std::ostream &operator<< (std::ostream &os, const Mystring &rhs); //friend functions have access to class's private and protected class members
   friend std::istream &operator>> (std::istream &is, Mystring &rhs);
   
private:
   char* str;  //pointer to char[] object in heap that holds the c-style string
   
public:
   Mystring();   //no args constructor
   Mystring(const char *s);  //overloaded single arg constructor
   Mystring(const Mystring &source); //copy constructor
   Mystring(Mystring &&source);  //Move constructor
   ~Mystring()   //Destuctor
   
   Mystring &operator=(const Mystring &rhs)  //copy assignment
   Mystring &operator=(Mystring &&rhs) //move assignment   
   
   void display() const; // for displaying on console

   //getters
   int get_length() const;     
   const char* get_str() const;

   //Operators overloading
   Mystring operator-();   //make lowercase
   Mystring operator+(const Mystring &rhs);   //concatenate
   bool operator== (const Mystring &rhs); //equals   
   bool operator!= (const Mystring &rhs); //not equals   
   bool operator< (const Mystring &rhs); //less than   
   bool operator> (const Mystring &rhs); //greater than
   Mystring &operator+=(const Mystring &rhs); // s1 += s2 concat and assign
   Mystring operator*(int n) const; // s2 = s1*3  string repetition
   Mystring &operator*=(int n);    // s1 *= 3 , s1 = s1 * 3;
   Mystring &operator++();    //++s1
   Mystring operator++(int);    //s1++
	  
}

#endif //_MYSTRING_H_ This directive closes the conditional block started by #ifndef directive
/*How this above code works? when the header file is included in the code, the prereprocessor checks if the corresponding eader guard macro is already defined. if it is not defined then the section of code(i.e header class contents) is included for the compilation of code. If it is already defined(and compiled before) it skips it and prevents it from including it multiple times for compilation
This helps in preventing errors from arising due to multiple definition of same entities. */


/*
1. preprocessor directive 
2. stream insertion operator as friend 
3. stream extraction operator as friend
3. private data member - char pointer to object
4. public member functions: constructor, single arg constructor, copy constructor, move constructor
5. assignment operator copy and move
6. destructor
7. display function , getters - getlenggth of string and get pointer to string class object
8. Operators overloading - make lowercase, concatenate, concatenate and assign, repeat string and repeat and assign
9. equals and not equals
10. greater than and less than
11. post increment and pre increment  */


//Class implementation
#include <iostream>
#include <cstring>
#include "Mystring.h"


//friend stream insertion operator
std::ostream Mystring::&operator<<(std::ostream &os, const Mystring &rhs)
{
	os << rhs.str;
	return os;
}

//friend stream extraction operator
std::istream Mystring::&operator>>(std::istream &is, Mystring &rhs)
{
	char* buff = new char[1000];
	in >> buff;
	rhs = MyString(buff);
	delete [] buff;
	return is;
}

//constructor with no args
Mystring::Mystring()
    :str(nullptr)
{
	std::cout << "No args constructor " << std::endl;
	str = new char[1];  //dynamically allocates a memory for a single character using new 
	*str = '\0'; //initializes the first character of allocated memory with terminator '\0'. This terminator marks the ending of the string
}

//overloaded single arg constructor
Mystring::Mystring(const char *s)
    :str(nullptr)
{ 
    std::cout << "Overloaded single arg constructor" << std::endl;
    if(s == nullptr)
	{
	    str = new char[1];
		*str = '\0';
	}
	else
	{
		str = new char[strlen(s)+1];
		stpcpy(str, s);
	}
}
		
//copy constructor
MyString::Mystring(const Mystring &source)
           :str(nullptr)
{   
     str = new char[strlen(source.str) + 1];
	 strcpy(str, source.str);
}

//Move constructor
MyString::Mystring(Mystring &&source)
       :str(source.str)
	   {
		   source.str = nullptr;
	   }
	   
//destructor
Mystring::~Mystring()
{
	std::cout << "Destuctor is called" << std::endl;
	delete [] str;
}

//Copy Assignment
MyString &MyString::operator=(const Mystring &rhs)
{
	if(this == &rhs)
		return *this;
	delete [] str;
	str = new char[strlen(rhs.str) + 1];
	strcpy(str, rhs.str);
	return *this;
}		

MyString &Mystring::operator=(Mystring &&rhs)
{
	if(this == &rhs)
		return *this;
    delete [] str;
	str = rhs.str;
	rhs.str = nullptr;
	return *this;
}

//getters
void Mystring::display() const{
	std::cout << str << " : " << get_length() << std::endl;
}

int MyString::get_length() { return strlen(str);}
const char *Mystring::get_str() const {return str;}
	
	
//operator overloading

//equals
bool Mystring::operator==(const Mystring &rhs) const
{
	return (std::strcmp(str, rhs.str) == 0);
}

//not equals
bool MyString::operator!=(const Mystring &rhs) const
{
	return !(std::strcmp(str, rhs.str) == 0);
}

//less than
bool Mystring::operator<(const Mystring &rhs) const
{
	return (std::strcmp(str, rhs.str) < 0);
}


//greater than
bool Mystring::operator>(const Mystring &rhs) const 
{
	return (std::strcmp(str, rhs.str) > 0);
}

//make lowercase
Mystring MyString::operator-() const
{
	char *buff = new char[strlen(str)+1];
	strcpy(buff, str);
	for(size_t i = 0; i < strlen(buff); << i++)
	{
		buff[i] = std::tolower(buff[i]);
	}
	Mystring temp(buff);
	delete [] buff;
	return temp;
}

//concatenate
Mystring Mystring::operator+(const Mystring &rhs) const
{
	char *buff = new char[strlen(str) + strlen(rhs.str) + 1];
	strcpy(buff, str);
	strcat(buff, rhs.str);
	Mystring temp(buff);
    delete [] buff;
    return temp;
}	

//concatenate and assign +=   s1 += s2, s1 = s1 + s2
Mystring &Mystring::operator+=(const Mystring &rhs) 
{
	*this = *this + rhs;
	return *this;
}

//repeat
Mystring Mystring::operator*(int n) const
{
	Mystring temp;
	for(int i = 1; i <= n; i++)
	{
	   temp = temp + *this;
	}
	return temp;
}

//repeat and assign     s1 *= 3 , s1 = s1 * 3; 
Mystring &Mystring::operator*=(int n)
{
    *this = *this * n;
	return *this;
}	

//Pre increment - make the string upper case
Mystring &Mystring::operator++()
{
	for(size_t i = 0; i < strlen(str); i++)
	{
		str[i] = std::toupper(str[i]);
	}
	return *this;
}	

//post increment - make the string upper case
Mystring Mystring::operator++(int n)
{
   Mystring temp(*this);
   operator++();
   return temp;
}	

//main cpp
#include <iostream>
#include "Mystring.h"

using namespace std;

int main() {
    
    cout << boolalpha << endl;
    Mystring a {"frank"};
    Mystring b {"frank"};
    cout << (a==b) << endl;         // true
    cout << (a!=b) << endl;           // false
    
    b = "george";
    cout << (a==b) << endl;         // false
    cout << (a!=b) << endl;          // true
     cout << (a<b) << endl;         // true
    cout << (a>b) << endl;          // false
    
    Mystring s1 {"FRANK"};
    s1 = -s1;       
    cout << s1 << endl;             // frank              

    s1 = s1 + "*****";
    cout << s1 << endl;             // frank*****       
    
    s1 += "-----";                      // frank*****-----
    cout << s1 << endl;
    
    Mystring s2{"12345"};
    s1 = s2 * 3;
    cout << s1 << endl;           // 123451234512345
    
    Mystring s3{"abcdef"};  
    s3 *= 5;
    cout << s3 << endl;             // abcdefabcdefabcdefabcdefabcdef
    
    Mystring repeat_string;
    int repeat_times;
    cout << "Enter a string to repeat: " << endl;
    cin >> repeat_string;
    cout << "How many times would you like it repeated? " << endl;
    cin >> repeat_times;
    repeat_string *= repeat_times;
    cout << "The resulting string is: " << repeat_string << endl;
    
    cout << (repeat_string * 12) << endl;
    
    repeat_string = "RepeatMe";
    cout << (repeat_string + repeat_string + repeat_string) << endl;
    
    repeat_string += (repeat_string * 3);
    cout << repeat_string << endl;
    
    repeat_string = "RepeatMe";
    repeat_string += (repeat_string + repeat_string + repeat_string);


  Mystring s = "Frank";
    ++s;
    cout << s << endl;                  // FRANK
    
    s = -s; 
    cout << s << endl;                  // frank
    Mystring result;
    result = ++s;                           
    cout << s << endl;                  // FRANK
    cout << result << endl;           // FRANK
    
    s = "Frank";
    s++;
    cout << s << endl;                  // FRANK
    
    s = -s;
    cout << s << endl;                  // frank
    result = s++;
    cout << s << endl;                  // FRANK
    cout << result << endl;           // frank
    return 0;
}	
	
	
	



